//@ts-nocheck

import Head from 'next/head'
import Image from 'next/image'
import Tiptap from '../components/Tiptap'
import { useCollection } from "react-firebase-hooks/firestore"
import TiptapTitle from '../components/TiptapTitle'
import { collection, doc, updateDoc, serverTimestamp } from "firebase/firestore";
import { db } from "../firebase/firestore";
import { NextPage } from 'next';
import { useEffect, useState } from 'react'

function toTitleCase(str: string) {
    return str.replace(
        /\w\S*/g,
        function (txt) {
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        }
    );
}

export default function Home() {
    const [value, loading, error] = useCollection(
        collection(db, 'Notes'),
        {
            snapshotListenOptions: { includeMetadataChanges: true },
        }
    );

    const [notebooksValue, notebooksLoading, notebooksError] = useCollection(
        collection(db, 'Notebooks'),
        {
            snapshotListenOptions: { includeMetadataChanges: true },
        }
    );

    const [showAlert, setShowAlert] = useState(false)

    async function setTitle(newTitle) {
        const docRef = doc(db, 'Notes', value?.docs[currentPage].id)
        await updateDoc(docRef, {
            title: newTitle,
            updated: serverTimestamp()
        });
    }

    async function setContent(newContent) {
        const docRef = doc(db, 'Notes', value?.docs[currentPage].id);
        setShowAlert(true);
        console.log('updating..')
        const timer = setTimeout(() => {
            setShowAlert(false), console.log('finished updating.')
        }, 2000);

        await updateDoc(docRef, {
            content: newContent,
            updated: serverTimestamp()
        });
    }

    const [currentPage, setCurrentPage] = useState(0);



    return (
        <div >
            <Head>
                <title>EasyNote</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            {showAlert ? <div className='absolute p-2 bg-white border border-black left-1/2'>Updating...</div> : ''}
            <main className='grid grid-cols-12 pt-8'>
                <ul className='col-span-2 divide-y divide-slate-800'>
                    <p className='mb-2 text-2xl font-bold text-center'>Notebooks</p>
                    {(notebooksError || error) && <strong>Error: {JSON.stringify(error)}</strong>}
                    {(notebooksLoading || loading) && <span>Loading...</span>}
                    {(notebooksValue && value) && (
                        <ul className='divide-y divide-slate-500'>
                            {notebooksValue.docs.map((nbdoc) => (
                                <div key={nbdoc.id} className='px-4 py-2 text-white bg-slate-600'>
                                    <p className='text-lg'>{nbdoc.data().title}</p>
                                    <ul className='divide-y divide-slate-500'>
                                        {value.docs.filter(doc => nbdoc.data().notes.includes(doc.id.toString())).map((doc) => {
                                            return (
                                                <div key={doc.id} className='px-4 py-2 text-white bg-slate-600'>
                                                    <button className='w-full text-left' onClick={() => setCurrentPage(value?.docs.map(function (x) { return x.id; }).indexOf(doc.id))}>
                                                        <p className='text-lg'>{doc.data().title}</p>
                                                    </button>
                                                </div>)
                                        })
                                        }
                                    </ul>
                                </div>
                            ))}
                        </ul>
                    )}
                </ul>

                <div className='min-w-full min-h-screen col-span-10'>
                    <div className='text-center'>
                        {(notebooksValue && value) ? <TiptapTitle title={value?.docs[currentPage].data().title} setTitle={setTitle} currPage={currentPage} /> : 'Loading...'}
                    </div>
                    <div className='min-w-full min-h-screen border border-b-0 border-black ' >
                        {(notebooksValue && value) ? <Tiptap noteContent={value?.docs[currentPage].data().content} setContent={setContent} currPage={currentPage} /> : 'Loading...'}
                    </div>
                </div>
            </main>

            <footer >
                <div className='px-8 py-4 border-t border-black bg-neutral-100'>
                    EasyNote <br />
                    Â© 2022 Robby Hoover
                </div>
            </footer>
        </div>
    )
}
